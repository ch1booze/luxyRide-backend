// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v3.12.4
// source: customers.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';

export const protobufPackage = 'customers';

export interface SignupDto {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
}

export interface SignupResponse {
  accessToken: string;
}

function createBaseSignupDto(): SignupDto {
  return { firstName: '', lastName: '', email: '', password: '' };
}

export const SignupDto: MessageFns<SignupDto> = {
  encode(
    message: SignupDto,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.firstName !== '') {
      writer.uint32(10).string(message.firstName);
    }
    if (message.lastName !== '') {
      writer.uint32(18).string(message.lastName);
    }
    if (message.email !== '') {
      writer.uint32(26).string(message.email);
    }
    if (message.password !== '') {
      writer.uint32(34).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignupDto {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignupDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignupDto {
    return {
      firstName: isSet(object.firstName)
        ? globalThis.String(object.firstName)
        : '',
      lastName: isSet(object.lastName)
        ? globalThis.String(object.lastName)
        : '',
      email: isSet(object.email) ? globalThis.String(object.email) : '',
      password: isSet(object.password)
        ? globalThis.String(object.password)
        : '',
    };
  },

  toJSON(message: SignupDto): unknown {
    const obj: any = {};
    if (message.firstName !== '') {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== '') {
      obj.lastName = message.lastName;
    }
    if (message.email !== '') {
      obj.email = message.email;
    }
    if (message.password !== '') {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignupDto>, I>>(base?: I): SignupDto {
    return SignupDto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignupDto>, I>>(
    object: I,
  ): SignupDto {
    const message = createBaseSignupDto();
    message.firstName = object.firstName ?? '';
    message.lastName = object.lastName ?? '';
    message.email = object.email ?? '';
    message.password = object.password ?? '';
    return message;
  },
};

function createBaseSignupResponse(): SignupResponse {
  return { accessToken: '' };
}

export const SignupResponse: MessageFns<SignupResponse> = {
  encode(
    message: SignupResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accessToken !== '') {
      writer.uint32(10).string(message.accessToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignupResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignupResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignupResponse {
    return {
      accessToken: isSet(object.accessToken)
        ? globalThis.String(object.accessToken)
        : '',
    };
  },

  toJSON(message: SignupResponse): unknown {
    const obj: any = {};
    if (message.accessToken !== '') {
      obj.accessToken = message.accessToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignupResponse>, I>>(
    base?: I,
  ): SignupResponse {
    return SignupResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignupResponse>, I>>(
    object: I,
  ): SignupResponse {
    const message = createBaseSignupResponse();
    message.accessToken = object.accessToken ?? '';
    return message;
  },
};

export interface Customers {
  Signup(request: SignupDto): Promise<SignupResponse>;
}

export const CustomersServiceName = 'customers.Customers';
export class CustomersClientImpl implements Customers {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || CustomersServiceName;
    this.rpc = rpc;
    this.Signup = this.Signup.bind(this);
  }
  Signup(request: SignupDto): Promise<SignupResponse> {
    const data = SignupDto.encode(request).finish();
    const promise = this.rpc.request(this.service, 'Signup', data);
    return promise.then((data) =>
      SignupResponse.decode(new BinaryReader(data)),
    );
  }
}

interface Rpc {
  request(
    service: string,
    method: string,
    data: Uint8Array,
  ): Promise<Uint8Array>;
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
